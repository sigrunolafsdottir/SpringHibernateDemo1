package com.example.demo.controllers;

import com.example.demo.models.Book;
import com.example.demo.repositories.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@RestController                            // This means that this class is a Controller
@RequestMapping("/demo")               // This means URL's start with /demo (after Application path)
public class BookController {
    // This means to get the bean called bookRepository
    @Autowired
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @GetMapping( "/add")
    public String addNewBook(@RequestParam String title
            , @RequestParam String author) {
        // @RequestParam means it is a parameter from the GET or POST request

        Book n = new Book();
        n.setTitle(title);
        n.setAuthor(author);
        bookRepository.save(n);
        return "Saved";
    }

    //för att posta från kommandoraden: curl localhost:8080/demo/add -d title=First -d author=SomeGuy
    @PostMapping( "/add") // Map ONLY POST Requests
    public String addNewUserByPost(@RequestParam String title
            , @RequestParam String author) {
        // @RequestParam means it is a parameter from the GET or POST request

        Book n = new Book(title, author);
        bookRepository.save(n);
        return "Saved";
    }


    @GetMapping("/all")
    public Iterable<Book> getAllUsers() {
        // This returns a JSON or XML with the books
        return bookRepository.findAll();
    }

    @GetMapping( "/book")
    public Iterable<Book> getBookByTitle(@RequestParam(required = false) String title,
                                         @RequestParam(required = false) String author) {
        // @RequestParam means it is a parameter from the GET or POST request
        if (title != null && author != null) {
            return bookRepository.findByTitleAndAuthor(title, author);
        } else if (title != null) {
            return bookRepository.findByTitle(title);
        } else if (author != null) {
            return bookRepository.findByAuthor(author);
        }
        return null;
    }


    @GetMapping( "/delete/{id}")
    public String deleteBookById(@PathVariable long id) {
        bookRepository.deleteById(id);
        return "Book was deleted";
    }


    @GetMapping( "/addOrUpdate")
    public String addOrUpdateNewBook(@RequestParam String title
            , @RequestParam String author, @RequestParam (required=false) Long id) {

        Book n = new Book();
        n.setTitle(title);
        n.setAuthor(author);
        if (id != null){
            n.setId(id);
        }
        bookRepository.save(n);
        return "Saved";
    }

}